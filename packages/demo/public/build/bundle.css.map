{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\InnerCarousel.svelte",
    "..\\..\\Indicators.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Carousel from \"amedford-svelte-carousel-base\";\n  let uid = 0;\n  let autoplay = true;\n  let delay = 2000;\n\n  let raw = `[\n    {\n      \"class\": \"red\",\n      \"content\": \"<div class='centered'><h1>Slide 1</h1></div>\"\n    },\n    {\n      \"class\": \"green\",\n      \"content\": \"<div class='centered'><h1>Slide 2</h1></div>\"\n    },\n    {\n      \"class\": \"yellow\",\n      \"content\": \"<div class='centered'><h1>Slide 3</h1></div>\"\n    },\n    {\n      \"class\": \"blue\",\n      \"content\": \"<div class='centered'><h1>Slide 4</h1></div>\"\n    }\n  ]`;\n  let parsed;\n\n  $: {\n    try {\n      if (raw) {\n        parsed = JSON.parse(raw);\n      }\n    } catch (error) {\n      console.log(\"parsing failed\", error);\n      parsed = [];\n    }\n  }\n\n  $: slides = parsed && parsed.length ? parsed : [];\n\n  let displayCount = 3;\n  let car;\n</script>\n\n<style>\n  :global(.centered) {\n    display: flex;\n    justify-content: center;\n    align-content: center;\n    align-items: center;\n    height: 100%;\n    width: 100%;\n  }\n\n  :global(.red) {\n    background-color: red !important;\n  }\n  :global(.green) {\n    background-color: green !important;\n  }\n  :global(.yellow) {\n    background-color: yellow !important;\n  }\n  :global(.blue) {\n    background-color: blue !important;\n  }\n\n  .slides-editor {\n    width: 100%;\n    height: 500px;\n    overflow: auto;\n  }\n\n  table {\n    width: 100%;\n  }\n\n  .red,\n  .green,\n  .blue,\n  .yellow {\n    width: 100%;\n  }\n</style>\n\n<main>\n  <Carousel {slides} {delay} {displayCount} {autoplay} bind:this={car}>\n    <div class=\"blue\">test 1</div>\n    <div class=\"red\">test 2</div>\n    <div class=\"yellow\">test 3</div>\n    <div class=\"green\">test 4</div>\n  </Carousel>\n  <table>\n    <tr>\n      <td># of Items to Display</td>\n      <td>\n        <input type=\"number\" bind:value={displayCount} />\n      </td>\n    </tr>\n    <tr>\n      <td>Autoplay</td>\n      <td>\n        <input type=\"checkbox\" bind:checked={autoplay} />\n      </td>\n    </tr>\n    <tr>\n      <td>Autoplay Delay</td>\n      <td>\n        <input placeholder=\"Delay\" bind:value={delay} />\n      </td>\n    </tr>\n    <tr>\n      <td colspan=\"2\">\n        <label>Slides</label>\n        <pre\n          class=\"slides-editor\"\n          contenteditable=\"true\"\n          bind:innerHTML={raw} />\n      </td>\n    </tr>\n  </table>\n\n</main>\n",
    "<script>\r\n  import { onDestroy } from \"svelte\";\r\n  import Slide from \"./Slide.svelte\";\r\n  import Indicators from \"./Indicators.svelte\";\r\n  import { quintOut } from \"svelte/easing\";\r\n  import { fly } from \"svelte/transition\";\r\n  import { flip } from \"svelte/animate\";\r\n  export let slides;\r\n  export let delay;\r\n  export let autoplay;\r\n  export let displayCount = 5;\r\n  export let centered = true;\r\n  export let infinite = true;\r\n  let uid = 0;\r\n  let visibleItems;\r\n  const indexSlides = (slide, index, arr) => ({ ...slide, id: uid++, index });\r\n  $: slidesIndexed = (slides || []).map(indexSlides);\r\n\r\n  $: {\r\n    displayCount;\r\n    setupState(slidesIndexed);\r\n  }\r\n\r\n  function getVisibleItemsWithOffset(slides$) {\r\n    const diff = displayCount - slides$.length;\r\n    // positive diff means we need more slides\r\n    if (diff === 0) {\r\n      return slides$;\r\n    } else if (diff < 0) {\r\n      return slides$.slice(0, displayCount);\r\n    }\r\n    let newItems = [...slides$];\r\n    for (let i = 0; i < diff; i++) {\r\n      newItems.push(getSlide(i));\r\n    }\r\n    return newItems;\r\n  }\r\n\r\n  function setupState(slides$) {\r\n    visibleItems = getVisibleItemsWithOffset(slides$);\r\n  }\r\n\r\n  const getSlide = index => {\r\n    let length = slidesIndexed.length;\r\n    let wrappedIndex =\r\n      index > length - 1 ? index % length : index < 0 ? length + index : index;\r\n    return { ...slidesIndexed[wrappedIndex], id: uid++ };\r\n  };\r\n\r\n  const nextSlideSingle = () => {\r\n    visibleItems = [getSlide(selectedIndex + 1)];\r\n  };\r\n  const previousSlideSingle = () => {\r\n    visibleItems = [getSlide(selectedIndex - 1)];\r\n  };\r\n\r\n  const nextSlideMulti = () => {\r\n    let newItems = visibleItems.slice(1);\r\n    const lastItemIndex = newItems[newItems.length - 1].index;\r\n    newItems.push(getSlide(lastItemIndex + 1));\r\n    visibleItems = getVisibleItemsWithOffset(newItems);\r\n  };\r\n\r\n  const previousSlideMulti = () => {\r\n    let newItems = visibleItems.slice(0, -1);\r\n    const firstItemIndex = newItems[0].index;\r\n    newItems.unshift(getSlide(firstItemIndex - 1));\r\n    visibleItems = getVisibleItemsWithOffset(newItems);\r\n  };\r\n\r\n  const nextSlide = () =>\r\n    displayCount > 1 ? nextSlideMulti() : nextSlideSingle();\r\n  const previousSlide = () =>\r\n    displayCount > 1 ? previousSlideMulti() : previousSlideSingle();\r\n\r\n  let isReverse = false;\r\n  let width;\r\n  let timer;\r\n\r\n  function Timer(callback, delayMs) {\r\n    let callbackStartTime;\r\n    let remaining = 0;\r\n    this.timerId = null;\r\n    this.paused = false;\r\n    this.pause = () => {\r\n      this.clear();\r\n      remaining -= Date.now() - callbackStartTime;\r\n      this.paused = true;\r\n    };\r\n    this.resume = () => {\r\n      setTimeout(this.setTimeout.bind(this), remaining);\r\n      this.paused = false;\r\n    };\r\n    this.setTimeout = () => {\r\n      this.clear();\r\n      this.timerId = setInterval(() => {\r\n        callbackStartTime = Date.now();\r\n        callback();\r\n      }, delayMs);\r\n    };\r\n    this.clear = () => {\r\n      clearInterval(this.timerId);\r\n    };\r\n    this.setTimeout();\r\n\r\n    onDestroy(() => {\r\n      this.clear();\r\n    });\r\n  }\r\n\r\n  $: if (autoplay) {\r\n    timer && timer.clear();\r\n    timer = new Timer(nextSlide, delay);\r\n  } else {\r\n    timer && timer.clear();\r\n    timer = undefined;\r\n  }\r\n\r\n  function next(event) {\r\n    nextSlide();\r\n  }\r\n\r\n  function previous(event) {\r\n    isReverse = true;\r\n    previousSlide();\r\n    setTimeout(() => (isReverse = false), 0);\r\n  }\r\n\r\n  function handleNavigate(event) {\r\n    visibleItems = getVisibleItemsWithOffset(slidesIndexed.slice(event.detail));\r\n  }\r\n\r\n  const animationProps = { duration: 1000, opacity: 0.5, easing: quintOut };\r\n  $: forwardAnimation = { ...animationProps, x: width };\r\n  $: reverseAnimation = { ...animationProps, x: width * -1 };\r\n  $: selectedIndex = visibleItems[0].index;\r\n</script>\r\n\r\n<style>\r\n  .carousel {\r\n    background-color: #000;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-content: center;\r\n    align-items: stretch;\r\n    position: relative;\r\n    overflow: hidden;\r\n    width: 100%;\r\n    height: 400px;\r\n  }\r\n\r\n  button {\r\n    height: 100%;\r\n    width: 40px;\r\n    border: none;\r\n    color: #fff;\r\n    background-color: rgba(50, 50, 50, 0.5);\r\n    z-index: 99999;\r\n    position: absolute;\r\n  }\r\n\r\n  .slide-wrapper {\r\n    padding: 10px 5px;\r\n  }\r\n\r\n  .next {\r\n    right: 0;\r\n  }\r\n\r\n  .previous {\r\n    left: 0;\r\n  }\r\n\r\n  .slide-container {\r\n    flex: 1;\r\n    display: flex;\r\n  }\r\n</style>\r\n\r\n{#if slides && slides.length}\r\n  <div\r\n    class=\"carousel\"\r\n    bind:clientWidth={width}\r\n    on:mouseover={() => timer && timer.pause()}\r\n    on:mouseleave={() => timer && timer.resume()}>\r\n    <button class=\"previous\" on:click={previous} type=\"button\">{'<'}</button>\r\n    {#each visibleItems as slide, i (slide.id)}\r\n      <div class=\"slide-container\" animate:flip={{ duration: 1000 }}>\r\n        {#if i < displayCount}\r\n          <div\r\n            class=\"slide-container slide-wrapper\"\r\n            out:fly={isReverse ? forwardAnimation : reverseAnimation}\r\n            in:fly={isReverse ? reverseAnimation : forwardAnimation}>\r\n            <Slide {slide} />\r\n          </div>\r\n        {/if}\r\n      </div>\r\n    {/each}\r\n    <button class=\"next\" on:click={next} type=\"button\">{'>'}</button>\r\n    <Indicators on:navigate={handleNavigate} {slides} {selectedIndex} />\r\n\r\n  </div>\r\n{/if}\r\n",
    "<script>\r\n  import { quintOut } from \"svelte/easing\";\r\n  import { fly } from \"svelte/transition\";\r\n  import { flip } from \"svelte/animate\";\r\n  import { createEventDispatcher } from \"svelte\";\r\n\r\n  const dispatch = createEventDispatcher();\r\n  export let slides;\r\n  export let selectedIndex;\r\n\r\n  const jumpToIndex = index => () => dispatch(\"navigate\", index);\r\n</script>\r\n\r\n<style>\r\n  .carousel-indicators {\r\n    color: green;\r\n    position: absolute;\r\n    display: flex;\r\n    flex-flow: nowrap;\r\n    bottom: 35px;\r\n    align-self: center;\r\n    background-color: rgba(50, 50, 50, 0.5);\r\n    border-radius: 15px;\r\n  }\r\n\r\n  .carousel-indicators button {\r\n    background-color: transparent;\r\n    border: none;\r\n    padding: 15px;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .carousel-indicators .active {\r\n    color: blue !important;\r\n  }\r\n</style>\r\n\r\n<div class=\"carousel-indicators\">\r\n  {#each slides as slide, i (slide.id)}\r\n    <button\r\n      type=\"button\"\r\n      animate:flip={{ delay: 250, duration: 250, easing: quintOut }}\r\n      on:click={jumpToIndex(i)}\r\n      class:active={selectedIndex === i}>\r\n      O\r\n    </button>\r\n  {/each}\r\n</div>\r\n"
  ],
  "names": [],
  "mappings": "AA4CU,SAAS,AAAE,CAAC,AAClB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,aAAa,CAAE,MAAM,CACrB,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,AACb,CAAC,AAEO,IAAI,AAAE,CAAC,AACb,gBAAgB,CAAE,GAAG,CAAC,UAAU,AAClC,CAAC,AACO,MAAM,AAAE,CAAC,AACf,gBAAgB,CAAE,KAAK,CAAC,UAAU,AACpC,CAAC,AACO,OAAO,AAAE,CAAC,AAChB,gBAAgB,CAAE,MAAM,CAAC,UAAU,AACrC,CAAC,AACO,KAAK,AAAE,CAAC,AACd,gBAAgB,CAAE,IAAI,CAAC,UAAU,AACnC,CAAC,AAED,cAAc,cAAC,CAAC,AACd,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,CACb,QAAQ,CAAE,IAAI,AAChB,CAAC,AAED,KAAK,cAAC,CAAC,AACL,KAAK,CAAE,IAAI,AACb,CAAC,AAED,kBAAI,CACJ,oBAAM,CACN,mBAAK,CACL,OAAO,cAAC,CAAC,AACP,KAAK,CAAE,IAAI,AACb,CAAC;AC0DD,SAAS,eAAC,CAAC,AACT,gBAAgB,CAAE,IAAI,CACtB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,aAAa,CAAE,MAAM,CACrB,WAAW,CAAE,OAAO,CACpB,QAAQ,CAAE,QAAQ,CAClB,QAAQ,CAAE,MAAM,CAChB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,AACf,CAAC,AAED,MAAM,eAAC,CAAC,AACN,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,gBAAgB,CAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CACvC,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAED,cAAc,eAAC,CAAC,AACd,OAAO,CAAE,IAAI,CAAC,GAAG,AACnB,CAAC,AAED,KAAK,eAAC,CAAC,AACL,KAAK,CAAE,CAAC,AACV,CAAC,AAED,SAAS,eAAC,CAAC,AACT,IAAI,CAAE,CAAC,AACT,CAAC,AAED,gBAAgB,eAAC,CAAC,AAChB,IAAI,CAAE,CAAC,CACP,OAAO,CAAE,IAAI,AACf,CAAC;AClKD,oBAAoB,8BAAC,CAAC,AACpB,KAAK,CAAE,KAAK,CACZ,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,MAAM,CACjB,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,MAAM,CAClB,gBAAgB,CAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CACvC,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,mCAAoB,CAAC,MAAM,eAAC,CAAC,AAC3B,gBAAgB,CAAE,WAAW,CAC7B,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,mCAAoB,CAAC,OAAO,eAAC,CAAC,AAC5B,KAAK,CAAE,IAAI,CAAC,UAAU,AACxB,CAAC"
}